{
	"version": "https://jsonfeed.org/version/1.1",
	"title": "domzlab",
	"language": "en",
	"home_page_url": "https://domzlab.com/",
	"feed_url": "https://domzlab.com/feed/feed.json",
	"description": "A blog where I write about things that I am learning.",
	"author": {
		"name": "Dominic Manthoko",
		"url": "https://domzlab.com/about-me/"
	},
	"items": [
		{
			"id": "https://domzlab.com/blog/javascript-closure/",
			"url": "https://domzlab.com/blog/javascript-closure/",
			"title": "JavaScript Closures",
			"content_html": "<h3 id=\"introduction\" tabindex=\"-1\">Introduction <a class=\"header-anchor\" href=\"https://domzlab.com/blog/javascript-closure/\">#</a></h3>\n<p>Over the past few years, I have been using JavaScript on and off. I have also recently started learning more about TypeScript. I am currently going through the <code>30 days of JavaScript</code> challenge on leetcode, and in the first card, learned about JavaScript Closures. Thus, I thought it would be a good idea to jot down some of things that I learned from answering the questions in the Closures section of the <code>30 days of JavaScript</code> challenge.</p>\n<h3 id=\"lexical-scoping\" tabindex=\"-1\">Lexical Scoping <a class=\"header-anchor\" href=\"https://domzlab.com/blog/javascript-closure/\">#</a></h3>\n<p>From my understanding, lexical scoping simply refers to the ability of a nested function being able to have access to the variables defined in the outer function.</p>\n<p>Another way I like to think of it is that you have a function that returns another function. The function you return can reference the variables that are created within the outer function, the input parameters of the function.</p>\n<h3 id=\"returning-a-single-function\" tabindex=\"-1\">Returning a single function <a class=\"header-anchor\" href=\"https://domzlab.com/blog/javascript-closure/\">#</a></h3>\n<p>Creating a closure is relatively simple. In the example code below, createCounter is a function that takes in a value. Each tiem your call counter, it will increment the value of n.</p>\n<pre class=\"language-ts\" tabindex=\"0\"><code class=\"language-ts\"><span class=\"token keyword\">const</span> <span class=\"token function-variable function\">createCounter</span> <span class=\"token operator\">=</span> <span class=\"token keyword\">function</span> <span class=\"token punctuation\">(</span>n<span class=\"token operator\">:</span> <span class=\"token builtin\">number</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">return</span> <span class=\"token keyword\">function</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        n<span class=\"token operator\">++</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code></pre>\n<p>The above can also be done by returning an arrow function.</p>\n<pre class=\"language-ts\" tabindex=\"0\"><code class=\"language-ts\"><span class=\"token keyword\">const</span> <span class=\"token function-variable function\">createCounter</span> <span class=\"token operator\">=</span> <span class=\"token keyword\">function</span> <span class=\"token punctuation\">(</span>n<span class=\"token operator\">:</span> <span class=\"token builtin\">number</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">return</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> n<span class=\"token operator\">++</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span></code></pre>\n<p>You can also explicitly define the function, and it return that function.</p>\n<pre class=\"language-ts\" tabindex=\"0\"><code class=\"language-ts\"><span class=\"token keyword\">const</span> <span class=\"token function-variable function\">createCounter</span> <span class=\"token operator\">=</span> <span class=\"token keyword\">function</span><span class=\"token punctuation\">(</span>n<span class=\"token operator\">:</span> <span class=\"token builtin\">number</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    \n    <span class=\"token keyword\">function</span> <span class=\"token function\">counter</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">return</span> n<span class=\"token operator\">++</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n    \n    <span class=\"token keyword\">return</span> counter<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n</code></pre>\n<h3 id=\"returning-multiple-functions\" tabindex=\"-1\">Returning multiple functions <a class=\"header-anchor\" href=\"https://domzlab.com/blog/javascript-closure/\">#</a></h3>\n<p>To returning more than one function, you can do so in the following ways.</p>\n<ol>\n<li>In your return block, define the different functions you want to return.</li>\n</ol>\n<pre class=\"language-ts\" tabindex=\"0\"><code class=\"language-ts\"><span class=\"token keyword\">type</span> <span class=\"token class-name\">Counter</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token function-variable function\">increment</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token builtin\">number</span><span class=\"token punctuation\">,</span>\n    <span class=\"token function-variable function\">decrement</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token builtin\">number</span><span class=\"token punctuation\">,</span>\n    <span class=\"token function-variable function\">reset</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token builtin\">number</span><span class=\"token punctuation\">,</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">function</span> <span class=\"token function\">createCounter</span><span class=\"token punctuation\">(</span>init<span class=\"token operator\">:</span> <span class=\"token builtin\">number</span><span class=\"token punctuation\">)</span><span class=\"token operator\">:</span> Counter <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">const</span> initVal <span class=\"token operator\">=</span> init<span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">return</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token function\">increment</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n            <span class=\"token keyword\">return</span> <span class=\"token operator\">++</span>init<span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n        <span class=\"token function\">decrement</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n            <span class=\"token keyword\">return</span> <span class=\"token operator\">--</span>init<span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n        <span class=\"token function\">reset</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n            init <span class=\"token operator\">=</span> initVal<span class=\"token punctuation\">;</span>\n            <span class=\"token keyword\">return</span> init<span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span>\n    <span class=\"token punctuation\">}</span>\n    \n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span> </code></pre>\n<ol start=\"2\">\n<li>Create the different instances of the functions you want to return. Then return an object containing all those functions</li>\n</ol>\n<pre class=\"language-ts\" tabindex=\"0\"><code class=\"language-ts\"><span class=\"token keyword\">type</span> <span class=\"token class-name\">Counter</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token function-variable function\">increment</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token builtin\">number</span><span class=\"token punctuation\">,</span>\n    <span class=\"token function-variable function\">decrement</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token builtin\">number</span><span class=\"token punctuation\">,</span>\n    <span class=\"token function-variable function\">reset</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token builtin\">number</span><span class=\"token punctuation\">,</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">function</span> <span class=\"token function\">createCounter</span><span class=\"token punctuation\">(</span>init<span class=\"token operator\">:</span> <span class=\"token builtin\">number</span><span class=\"token punctuation\">)</span><span class=\"token operator\">:</span> Counter <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">const</span> initVal <span class=\"token operator\">=</span> init<span class=\"token punctuation\">;</span>\n    \n    <span class=\"token keyword\">function</span> <span class=\"token function\">increment</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">return</span> <span class=\"token operator\">++</span>init<span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n    \n    <span class=\"token keyword\">function</span> <span class=\"token function\">decrement</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n            <span class=\"token keyword\">return</span> <span class=\"token operator\">--</span>init<span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n    \n    <span class=\"token keyword\">function</span> <span class=\"token function\">reset</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n            init <span class=\"token operator\">=</span> initVal<span class=\"token punctuation\">;</span>\n            <span class=\"token keyword\">return</span> init<span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n    \n    <span class=\"token keyword\">return</span> <span class=\"token punctuation\">{</span> increment<span class=\"token punctuation\">,</span> decrement<span class=\"token punctuation\">,</span> reset <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span></code></pre>\n<h3 id=\"references\" tabindex=\"-1\">References: <a class=\"header-anchor\" href=\"https://domzlab.com/blog/javascript-closure/\">#</a></h3>\n<p>[1] &quot;Closures - JavaScript | MDN,&quot; developer.mozilla.org. https://developer.mozilla.org/en-US/docs/Web/JavaScript/Closures</p>\n",
			"date_published": "2024-03-25T00:00:00Z"
		}
		,
		{
			"id": "https://domzlab.com/blog/testing_out_elastic_beanstalk/",
			"url": "https://domzlab.com/blog/testing_out_elastic_beanstalk/",
			"title": "Deploying a NodeJs application on Elastic Beanstalk",
			"content_html": "<h3 id=\"introduction\" tabindex=\"-1\">Introduction <a class=\"header-anchor\" href=\"https://domzlab.com/blog/testing_out_elastic_beanstalk/\">#</a></h3>\n<p>I've recently started preparing for the AWS Certified DevOps Engineer Professional Exam. I'm currently studying through a course on ACloudGuru that helps you prepare to sit for the exam.</p>\n<p>One of the topics covered in this course is Elastic Beanstalk. In my work as Cloud Support Engineer, I have yet come encounter a situation where I need to troubleshoot issues with this service. Thus, to get a general idea of how this service works, I thought it would be a good idea to see how one would go about deploying a NodeJs application on Elastic Beanstalk.</p>\n<h3 id=\"setting-up-my-development-environment\" tabindex=\"-1\">Setting up my Development Environment <a class=\"header-anchor\" href=\"https://domzlab.com/blog/testing_out_elastic_beanstalk/\">#</a></h3>\n<p>To create and deploy updates to an Elastic Beanstalk environment, I was using Elastic Beanstalk Command Line Interface (EB CLI) is a command line client. I used the setup scripts seen in [1] to install the EB CLI to my local machine.</p>\n<p>To get started, I created a new directory for your project files. In the newly created directory, I then added an index.js file. Below are the commands I used to do this from command line.</p>\n<pre class=\"language-sh\" tabindex=\"0\"><code class=\"language-sh\"><span class=\"token function\">mkdir</span> simple-app\n<span class=\"token builtin class-name\">cd</span> simple app</code></pre>\n<p>Thereafter, I used the EB CLI command <code>eb init -i</code> to set the default values for my elastic beanstalk environment. Below are the options that I selected:</p>\n<pre class=\"language-sh\" tabindex=\"0\"><code class=\"language-sh\">$ eb init <span class=\"token parameter variable\">-i</span>\n\nSelect a default region\n<span class=\"token number\">1</span><span class=\"token punctuation\">)</span> us-east-1 <span class=\"token builtin class-name\">:</span> US East <span class=\"token punctuation\">(</span>N. Virginia<span class=\"token punctuation\">)</span>\n<span class=\"token number\">2</span><span class=\"token punctuation\">)</span> us-west-1 <span class=\"token builtin class-name\">:</span> US West <span class=\"token punctuation\">(</span>N. California<span class=\"token punctuation\">)</span>\n<span class=\"token number\">3</span><span class=\"token punctuation\">)</span> us-west-2 <span class=\"token builtin class-name\">:</span> US West <span class=\"token punctuation\">(</span>Oregon<span class=\"token punctuation\">)</span>\n<span class=\"token number\">4</span><span class=\"token punctuation\">)</span> eu-west-1 <span class=\"token builtin class-name\">:</span> EU <span class=\"token punctuation\">(</span>Ireland<span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">..</span>.\n<span class=\"token punctuation\">(</span>default is <span class=\"token number\">3</span><span class=\"token punctuation\">)</span>: <span class=\"token number\">4</span>\n\n\nSelect an application to use\n<span class=\"token number\">1</span><span class=\"token punctuation\">)</span> simple-app\n<span class=\"token number\">2</span><span class=\"token punctuation\">)</span> first-servers\n<span class=\"token number\">3</span><span class=\"token punctuation\">)</span> nodejs-example-express-rds\n<span class=\"token number\">4</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">[</span> Create new Application <span class=\"token punctuation\">]</span>\n<span class=\"token punctuation\">(</span>default is <span class=\"token number\">1</span><span class=\"token punctuation\">)</span>: <span class=\"token number\">4</span>\n\n\nEnter Application Name\n<span class=\"token punctuation\">(</span>default is <span class=\"token string\">\"simple-app2\"</span><span class=\"token punctuation\">)</span>: \nApplication simple-app2 has been created.\nSelect a platform.\n<span class=\"token number\">1</span><span class=\"token punctuation\">)</span> .NET Core on Linux\n<span class=\"token number\">2</span><span class=\"token punctuation\">)</span> .NET on Windows Server\n<span class=\"token number\">3</span><span class=\"token punctuation\">)</span> Docker\n<span class=\"token number\">4</span><span class=\"token punctuation\">)</span> Go\n<span class=\"token number\">5</span><span class=\"token punctuation\">)</span> Java\n<span class=\"token number\">6</span><span class=\"token punctuation\">)</span> Node.js\n<span class=\"token number\">7</span><span class=\"token punctuation\">)</span> PHP\n<span class=\"token number\">8</span><span class=\"token punctuation\">)</span> Packer\n<span class=\"token number\">9</span><span class=\"token punctuation\">)</span> Python\n<span class=\"token number\">10</span><span class=\"token punctuation\">)</span> Ruby\n<span class=\"token number\">11</span><span class=\"token punctuation\">)</span> Tomcat\n<span class=\"token punctuation\">(</span>make a selection<span class=\"token punctuation\">)</span>: <span class=\"token number\">6</span>\n\nSelect a platform branch.\n<span class=\"token number\">1</span><span class=\"token punctuation\">)</span> Node.js <span class=\"token number\">18</span> running on 64bit Amazon Linux <span class=\"token number\">2023</span>\n<span class=\"token number\">2</span><span class=\"token punctuation\">)</span> Node.js <span class=\"token number\">18</span> running on 64bit Amazon Linux <span class=\"token number\">2</span>\n<span class=\"token number\">3</span><span class=\"token punctuation\">)</span> Node.js <span class=\"token number\">16</span> running on 64bit Amazon Linux <span class=\"token number\">2</span> <span class=\"token punctuation\">(</span>Deprecated<span class=\"token punctuation\">)</span>\n<span class=\"token number\">4</span><span class=\"token punctuation\">)</span> Node.js <span class=\"token number\">14</span> running on 64bit Amazon Linux <span class=\"token number\">2</span> <span class=\"token punctuation\">(</span>Deprecated<span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">(</span>default is <span class=\"token number\">1</span><span class=\"token punctuation\">)</span>: <span class=\"token number\">1</span>\n\nCannot setup CodeCommit because there is no Source Control setup, continuing with initialization\nDo you want to <span class=\"token builtin class-name\">set</span> up SSH <span class=\"token keyword\">for</span> your instances?\n<span class=\"token punctuation\">(</span>Y/n<span class=\"token punctuation\">)</span>: n</code></pre>\n<p>Note, you would type the number you want to select, then hit enter to move to the next option.</p>\n<h3 id=\"application-code\" tabindex=\"-1\">Application Code <a class=\"header-anchor\" href=\"https://domzlab.com/blog/testing_out_elastic_beanstalk/\">#</a></h3>\n<p>Still in the simple-app directory, I created a file named index.js. I used code below:</p>\n<pre class=\"language-js\" tabindex=\"0\"><code class=\"language-js\"><span class=\"token keyword\">const</span> http <span class=\"token operator\">=</span> <span class=\"token function\">require</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"http\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">const</span> host <span class=\"token operator\">=</span> <span class=\"token string\">'localhost'</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">const</span> port <span class=\"token operator\">=</span> <span class=\"token number\">8080</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">const</span> <span class=\"token function-variable function\">requestListener</span> <span class=\"token operator\">=</span> <span class=\"token keyword\">function</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">req<span class=\"token punctuation\">,</span> res</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    res<span class=\"token punctuation\">.</span><span class=\"token function\">writeHead</span><span class=\"token punctuation\">(</span><span class=\"token number\">200</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    res<span class=\"token punctuation\">.</span><span class=\"token function\">end</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Hello World!\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">const</span> server <span class=\"token operator\">=</span> http<span class=\"token punctuation\">.</span><span class=\"token function\">createServer</span><span class=\"token punctuation\">(</span>requestListener<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\nserver<span class=\"token punctuation\">.</span><span class=\"token function\">listen</span><span class=\"token punctuation\">(</span>port<span class=\"token punctuation\">,</span> host<span class=\"token punctuation\">,</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n    console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token template-string\"><span class=\"token template-punctuation string\">`</span><span class=\"token string\">Server is running on http://</span><span class=\"token interpolation\"><span class=\"token interpolation-punctuation punctuation\">${</span>host<span class=\"token interpolation-punctuation punctuation\">}</span></span><span class=\"token string\">:</span><span class=\"token interpolation\"><span class=\"token interpolation-punctuation punctuation\">${</span>port<span class=\"token interpolation-punctuation punctuation\">}</span></span><span class=\"token template-punctuation string\">`</span></span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n</code></pre>\n<p>To test this simple server, I ran <code>node index.js</code>. Then, in another terminal window, ran curl localhost:8080. The output returned was as follows:</p>\n<pre class=\"language-sh\" tabindex=\"0\"><code class=\"language-sh\">$ <span class=\"token function\">curl</span> localhost:8080\n\nHello World<span class=\"token operator\">!</span></code></pre>\n<h3 id=\"deploy-first-build-of-application\" tabindex=\"-1\">Deploy first build of application <a class=\"header-anchor\" href=\"https://domzlab.com/blog/testing_out_elastic_beanstalk/\">#</a></h3>\n<p>To deploy this application to elastic beanstalk, run <code>eb create</code>. I used the default values for each option in the command prompt:</p>\n<pre class=\"language-sh\" tabindex=\"0\"><code class=\"language-sh\">$ eb create\n\nEnter Environment Name\n<span class=\"token punctuation\">(</span>default is simple-app2-dev<span class=\"token punctuation\">)</span>: \nEnter DNS CNAME prefix\n<span class=\"token punctuation\">(</span>default is simple-app2-dev<span class=\"token punctuation\">)</span>: \n\nSelect a load balancer <span class=\"token builtin class-name\">type</span>\n<span class=\"token number\">1</span><span class=\"token punctuation\">)</span> classic\n<span class=\"token number\">2</span><span class=\"token punctuation\">)</span> application\n<span class=\"token number\">3</span><span class=\"token punctuation\">)</span> network\n<span class=\"token punctuation\">(</span>default is <span class=\"token number\">2</span><span class=\"token punctuation\">)</span>: <span class=\"token number\">2</span>\n\n\nWould you like to <span class=\"token builtin class-name\">enable</span> Spot Fleet requests <span class=\"token keyword\">for</span> this environment? <span class=\"token punctuation\">(</span>y/N<span class=\"token punctuation\">)</span>: N</code></pre>\n<p>After running <code>eb create</code>, the deploy status was logged in the terminal (provided that you didn't run Ctrl+C).</p>\n<p>The first run did create the environment, but resulted in the following error:</p>\n<pre class=\"language-sh\" tabindex=\"0\"><code class=\"language-sh\"><span class=\"token number\">2023</span>-12-04 <span class=\"token number\">11</span>:59:07    ERROR   Instance deployment failed to generate a <span class=\"token string\">'Procfile'</span> <span class=\"token keyword\">for</span> Node.js. Provide one of these files: <span class=\"token string\">'package.json'</span>, <span class=\"token string\">'server.js'</span>, or <span class=\"token string\">'app.js'</span><span class=\"token builtin class-name\">.</span> The deployment failed.\n<span class=\"token number\">2023</span>-12-04 <span class=\"token number\">11</span>:59:09    ERROR   <span class=\"token punctuation\">[</span>Instance: i-abcef1234<span class=\"token punctuation\">]</span> Command failed on instance. Return code: <span class=\"token number\">1</span> Output: Engine execution has encountered an error<span class=\"token punctuation\">..</span>\n<span class=\"token number\">2023</span>-12-04 <span class=\"token number\">11</span>:59:09    INFO    Command execution completed on all instances. Summary: <span class=\"token punctuation\">[</span>Successful: <span class=\"token number\">0</span>, Failed: <span class=\"token number\">1</span><span class=\"token punctuation\">]</span>.\n<span class=\"token number\">2023</span>-12-04 <span class=\"token number\">12</span>:00:12    ERROR   Create environment operation is complete, but with errors. For <span class=\"token function\">more</span> information, see troubleshooting documentation.\n                                \nERROR: ServiceError - Create environment operation is complete, but with errors. For <span class=\"token function\">more</span> information, see troubleshooting documentation.</code></pre>\n<p>From the output, we can see that the deployment failed due to Elastic Beanstalk not being able to create a Procfile. From this, I learned that you would either need to create a package.json file for your project, or name started file server.js or app.js.</p>\n<p>In my case, what I did is create a Procfile in the route of my directory. And in that file, I specified index.js</p>\n<pre class=\"language-text\" tabindex=\"0\"><code class=\"language-text\">### Contents of Procfile\n\nweb: node index.js</code></pre>\n<h3 id=\"deploy-new-revision-of-application\" tabindex=\"-1\">Deploy new revision of application <a class=\"header-anchor\" href=\"https://domzlab.com/blog/testing_out_elastic_beanstalk/\">#</a></h3>\n<p>I then ran <code>eb deploy</code> to deploy a new revision of my application.</p>\n<p>After adding the Procfile to my project, the deployment completed successfully.</p>\n<pre class=\"language-sh\" tabindex=\"0\"><code class=\"language-sh\">$ eb deploy\n\nCreating application version archive <span class=\"token string\">\"app-***\"</span><span class=\"token builtin class-name\">.</span>\nUploading simple-app2/app-***.zip to S3. This may take a while.\nUpload Complete.\n<span class=\"token number\">2023</span>-12-04 <span class=\"token number\">12</span>:14:02    INFO    Environment update is starting.      \n<span class=\"token number\">2023</span>-12-04 <span class=\"token number\">12</span>:14:05    INFO    Deploying new version to instance<span class=\"token punctuation\">(</span>s<span class=\"token punctuation\">)</span>.\n<span class=\"token number\">2023</span>-12-04 <span class=\"token number\">12</span>:14:14    INFO    Instance deployment completed successfully.\n<span class=\"token number\">2023</span>-12-04 <span class=\"token number\">12</span>:14:19    INFO    New application version was deployed to running EC2 instances.\n<span class=\"token number\">2023</span>-12-04 <span class=\"token number\">12</span>:14:19    INFO    Environment update completed successfully.</code></pre>\n<p>To view an EB application, you can run <code>eb open</code>. This should open the application URL in a browser. Alternatively, run <code>eb status</code>. In the command output, you would see the CNAME, is the unique URL to access to your Elastic Beanstalk application.</p>\n<h3 id=\"final-update-to-application\" tabindex=\"-1\">Final update to application <a class=\"header-anchor\" href=\"https://domzlab.com/blog/testing_out_elastic_beanstalk/\">#</a></h3>\n<p>To end off, I made one more change to my index.js file. As seen below, I updated my source code to return the request headers as an HTML response.</p>\n<pre class=\"language-js\" tabindex=\"0\"><code class=\"language-js\"><span class=\"token keyword\">const</span> http <span class=\"token operator\">=</span> <span class=\"token function\">require</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"http\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">const</span> host <span class=\"token operator\">=</span> <span class=\"token string\">'localhost'</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">const</span> port <span class=\"token operator\">=</span> <span class=\"token number\">8080</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token comment\">/**\n * Returns the request headers as a response\n */</span>\n<span class=\"token keyword\">const</span> <span class=\"token function-variable function\">requestListener</span> <span class=\"token operator\">=</span> <span class=\"token keyword\">function</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">req<span class=\"token punctuation\">,</span> res</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n\n  <span class=\"token keyword\">let</span> arr <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n  <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">const</span> <span class=\"token punctuation\">[</span>key<span class=\"token punctuation\">,</span> value<span class=\"token punctuation\">]</span> <span class=\"token keyword\">of</span> Object<span class=\"token punctuation\">.</span><span class=\"token function\">entries</span><span class=\"token punctuation\">(</span>req<span class=\"token punctuation\">.</span>headers<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        arr<span class=\"token punctuation\">.</span><span class=\"token function\">push</span><span class=\"token punctuation\">(</span><span class=\"token template-string\"><span class=\"token template-punctuation string\">`</span><span class=\"token string\">&lt;p></span><span class=\"token interpolation\"><span class=\"token interpolation-punctuation punctuation\">${</span>key<span class=\"token interpolation-punctuation punctuation\">}</span></span><span class=\"token string\">: </span><span class=\"token interpolation\"><span class=\"token interpolation-punctuation punctuation\">${</span>value<span class=\"token interpolation-punctuation punctuation\">}</span></span><span class=\"token string\">&lt;/p></span><span class=\"token template-punctuation string\">`</span></span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n  \n  res<span class=\"token punctuation\">.</span><span class=\"token function\">setHeader</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Content-Type\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"text/html\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  res<span class=\"token punctuation\">.</span><span class=\"token function\">writeHead</span><span class=\"token punctuation\">(</span><span class=\"token number\">200</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  res<span class=\"token punctuation\">.</span><span class=\"token function\">end</span><span class=\"token punctuation\">(</span><span class=\"token template-string\"><span class=\"token template-punctuation string\">`</span><span class=\"token string\">&lt;html>&lt;body>&lt;h2>Request Headers&lt;/h2></span><span class=\"token interpolation\"><span class=\"token interpolation-punctuation punctuation\">${</span>arr<span class=\"token punctuation\">.</span><span class=\"token function\">join</span><span class=\"token punctuation\">(</span><span class=\"token string\">''</span><span class=\"token punctuation\">)</span><span class=\"token interpolation-punctuation punctuation\">}</span></span><span class=\"token string\">&lt;/body>&lt;/html></span><span class=\"token template-punctuation string\">`</span></span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">const</span> server <span class=\"token operator\">=</span> http<span class=\"token punctuation\">.</span><span class=\"token function\">createServer</span><span class=\"token punctuation\">(</span>requestListener<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\nserver<span class=\"token punctuation\">.</span><span class=\"token function\">listen</span><span class=\"token punctuation\">(</span>port<span class=\"token punctuation\">,</span> host<span class=\"token punctuation\">,</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n    console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token template-string\"><span class=\"token template-punctuation string\">`</span><span class=\"token string\">Server is running on http://</span><span class=\"token interpolation\"><span class=\"token interpolation-punctuation punctuation\">${</span>host<span class=\"token interpolation-punctuation punctuation\">}</span></span><span class=\"token string\">:</span><span class=\"token interpolation\"><span class=\"token interpolation-punctuation punctuation\">${</span>port<span class=\"token interpolation-punctuation punctuation\">}</span></span><span class=\"token template-punctuation string\">`</span></span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n</code></pre>\n<p>As before, I ran <code>eb deploy</code> to deploy a new revision. Once the deployment completed successfully, I used the CNAME of my EB application test the request on my web browser.</p>\n<p><img src=\"https://domzlab.com/img/test_out_elastic_beanstalk/1_view_response_in_browser.png\" alt=\"\"></p>\n<p>Thank you for reading.</p>\n<h3 id=\"references\" tabindex=\"-1\">References: <a class=\"header-anchor\" href=\"https://domzlab.com/blog/testing_out_elastic_beanstalk/\">#</a></h3>\n<ul>\n<li>[1] Install the EB CLI - https://docs.aws.amazon.com/elasticbeanstalk/latest/dg/eb-cli3-install.html</li>\n<li>[2] Deploying an Express application to Elastic Beanstalk - https://docs.aws.amazon.com/elasticbeanstalk/latest/dg/create_deploy_nodejs_express.html</li>\n<li>[3] https://www.digitalocean.com/community/tutorials/how-to-create-a-web-server-in-node-js-with-the-http-module</li>\n</ul>\n",
			"date_published": "2023-12-04T00:00:00Z"
		}
		,
		{
			"id": "https://domzlab.com/blog/create-website/",
			"url": "https://domzlab.com/blog/create-website/",
			"title": "Create 11ty static website from template",
			"content_html": "<h3 id=\"introduction\" tabindex=\"-1\">Introduction <a class=\"header-anchor\" href=\"https://domzlab.com/blog/create-website/\">#</a></h3>\n<p>In this post, I provide an overview of how I used the 11ty base theme as the starting point of this blog.</p>\n<h3 id=\"pre-requisites\" tabindex=\"-1\">Pre Requisites <a class=\"header-anchor\" href=\"https://domzlab.com/blog/create-website/\">#</a></h3>\n<p>To authorize requests to github when running commands from terminal e.g. cloning, git push/pull etc, I am using SSH keys. Ensure that you have configured an SSH key in GitHub.</p>\n<p>To have the same setup on your end, you can follow these guides from the GitHub documentation:</p>\n<ul>\n<li><a href=\"https://docs.github.com/en/authentication/connecting-to-github-with-ssh/generating-a-new-ssh-key-and-adding-it-to-the-ssh-agent\">Generate an SSH key</a></li>\n<li><a href=\"https://docs.github.com/en/authentication/connecting-to-github-with-ssh/adding-a-new-ssh-key-to-your-github-account\">Add a new SSH key to your GitHub account</a></li>\n</ul>\n<p>I also recommend using VS Code as your code editor. Feel free to use any code/text editor of your choice.</p>\n<h3 id=\"create-repository-from-template\" tabindex=\"-1\">Create Repository from Template <a class=\"header-anchor\" href=\"https://domzlab.com/blog/create-website/\">#</a></h3>\n<p>The template I used for this site is the <a href=\"https://github.com/11ty/eleventy-base-blog\">eleventy base blog</a>.</p>\n<p>Using the link above to view the eleventy-base-blog in github.</p>\n<p><img src=\"https://domzlab.com/img/create_website_blog/1_11ty_base_blog.png\" alt=\"use template eleventy base blog\"></p>\n<p>Select <em><strong>Use this template</strong></em> →  <em><strong>Create a new repository</strong></em></p>\n<p>On the <em><strong>Create a new repository</strong></em> page, specify a name for your name repository. Then select <em><strong>Create repository</strong></em>.</p>\n<p><img src=\"https://domzlab.com/img/create_website_blog/2_create_repository.png\" alt=\"create new repository from template\"></p>\n<h3 id=\"clone-repository-and-run-server-locally\" tabindex=\"-1\">Clone repository and run server locally <a class=\"header-anchor\" href=\"https://domzlab.com/blog/create-website/\">#</a></h3>\n<p>On your local machine, clone the newly created repository in a directory on your choice.</p>\n<p>Command to clone respository to your local machine: <strong><code>git clone git@github.com:&lt;USER-NAME&gt;/&lt;REPOSITORY-NAME&gt;.git</code></strong></p>\n<p>Before we begin modifying the code, first, we shall run the server locally. Run <strong><code>npm install</code></strong> to install the depdencies.</p>\n<p>Thereafrer, to run the server locally, run <strong><code>npm start</code></strong>.</p>\n<h3 id=\"update-code-base\" tabindex=\"-1\">Update code base <a class=\"header-anchor\" href=\"https://domzlab.com/blog/create-website/\">#</a></h3>\n<p>In package.json, update the pathprefix seen in the <strong>build-ghpages</strong> script to be the same as your respository name:</p>\n<pre><code>&quot;build-ghpages&quot;: &quot;npx @11ty/eleventy --pathprefix=/noname-blog/&quot;\n</code></pre>\n<p>Thereafter, remove <strong>package-lock.json</strong> from .gitignore.</p>\n<p>In the root of your repository, create a folder named <strong>.github</strong>. Then, inside that folder, create a sub-directory named <strong>workflows</strong>.</p>\n<p>Using the YAML below, create the file <em><strong>.github/workflows/build-and-deploy.yml</strong></em> in the newly created directory.</p>\n<pre class=\"language-yaml\" tabindex=\"0\"><code class=\"language-yaml\"><span class=\"token key atrule\">name</span><span class=\"token punctuation\">:</span> Build and Deploy\n<span class=\"token key atrule\">on</span><span class=\"token punctuation\">:</span> <span class=\"token punctuation\">[</span>push<span class=\"token punctuation\">]</span>\n<span class=\"token key atrule\">jobs</span><span class=\"token punctuation\">:</span>\n  <span class=\"token key atrule\">build-and-deploy</span><span class=\"token punctuation\">:</span>\n    <span class=\"token key atrule\">runs-on</span><span class=\"token punctuation\">:</span> ubuntu<span class=\"token punctuation\">-</span>latest\n    <span class=\"token key atrule\">steps</span><span class=\"token punctuation\">:</span>\n      <span class=\"token punctuation\">-</span> <span class=\"token key atrule\">name</span><span class=\"token punctuation\">:</span> Checkout\n        <span class=\"token key atrule\">uses</span><span class=\"token punctuation\">:</span> actions/checkout@v3\n\n      <span class=\"token punctuation\">-</span> <span class=\"token key atrule\">name</span><span class=\"token punctuation\">:</span> Install and Build\n        <span class=\"token key atrule\">run</span><span class=\"token punctuation\">:</span> <span class=\"token punctuation\">|</span><span class=\"token scalar string\">\n          npm ci\n          npm run build-ghpages</span>\n\n      <span class=\"token punctuation\">-</span> <span class=\"token key atrule\">name</span><span class=\"token punctuation\">:</span> Deploy\n        <span class=\"token key atrule\">uses</span><span class=\"token punctuation\">:</span> peaceiris/actions<span class=\"token punctuation\">-</span>gh<span class=\"token punctuation\">-</span>pages@v3\n        <span class=\"token key atrule\">with</span><span class=\"token punctuation\">:</span>\n          <span class=\"token key atrule\">publish_dir</span><span class=\"token punctuation\">:</span> ./_site\n          <span class=\"token key atrule\">github_token</span><span class=\"token punctuation\">:</span> $<span class=\"token punctuation\">{</span><span class=\"token punctuation\">{</span> secrets.GITHUB_TOKEN <span class=\"token punctuation\">}</span><span class=\"token punctuation\">}</span></code></pre>\n<h3 id=\"deploy-code\" tabindex=\"-1\">Deploy Code <a class=\"header-anchor\" href=\"https://domzlab.com/blog/create-website/\">#</a></h3>\n<p>After making the above changes, deploy your code:</p>\n<pre class=\"language-sh\" tabindex=\"0\"><code class=\"language-sh\"><span class=\"token function\">git</span> <span class=\"token function\">add</span> <span class=\"token parameter variable\">-A</span>\n<span class=\"token function\">git</span> commit <span class=\"token parameter variable\">-m</span> <span class=\"token string\">\"Update package.json. Add build file.\"</span>\n<span class=\"token function\">git</span> push</code></pre>\n<p>After running the above, navigate to your github respository on github.com. You should then see a red x next to the short code of your most recent commit. You may need to wait for a few more minutes to see this.</p>\n<p>The red x indicates that there was an issue with your most recent build. Select the red x to see more details.</p>\n<p><img src=\"https://domzlab.com/img/create_website_blog/4_check_build_result.png\" alt=\"Build failure about code push\"></p>\n<p>When you select <strong>Details</strong>, this will take you to the Actions tab, and provide more details regarding why the build failed. In this case, a 403 error was being returned.</p>\n<p><img src=\"https://domzlab.com/img/create_website_blog/5_build_failed.png\" alt=\"Build failure about code push\"></p>\n<h3 id=\"update-permissions\" tabindex=\"-1\">Update Permissions <a class=\"header-anchor\" href=\"https://domzlab.com/blog/create-website/\">#</a></h3>\n<p>To resolve the error, you will need to go to Settings →  Action → General  →  Workflow permissions  → choose <strong>read and write permissions</strong> [1].</p>\n<p>Thereafter, re-run your failed build job. To do this, go to Actions, and under All workflow, you should see the build that failed. This would have the same value/name used in your commit message. In my case, this was <strong>Update package.json. Add build file</strong>. The name of the workflow that run would be the same as the commit message.</p>\n<p>Now, select the workflow that failed to run, then seelect Re-run all jobs. Therefore, the build should complete successfully.</p>\n<p>What you will see is that a new branch named gh-pages got create. This will be branch specified when configuring github pages as described further below.</p>\n<h3 id=\"enable-github-pages\" tabindex=\"-1\">Enable GitHub Pages <a class=\"header-anchor\" href=\"https://domzlab.com/blog/create-website/\">#</a></h3>\n<p>To enable GitHub pages on your GitHub repository, navigate to your respository, and select the <strong>Settings</strong>. From the left navigation menu, select <strong>Pages</strong>.</p>\n<p>On the <strong>GitHub Pages</strong> settings page that appears, configure the following:</p>\n<pre><code>Source: Deploy from Branch\nBranch: gh-pages\n</code></pre>\n<p>Then select save. After some time (waited for a minute or so on my end), refresh the page, and you should then be able to see the link to your static website</p>\n<p><img src=\"https://domzlab.com/img/create_website_blog/7_github_pages_link.png\" alt=\"GitHub pages link\"></p>\n<p>With that, you have deployed an 11ty website hosted on GitHub pages. You site would look similar to the one shown below.</p>\n<p><img src=\"https://domzlab.com/img/create_website_blog/8_11ty_site.png\" alt=\"11ty site\"></p>\n<h3 id=\"references\" tabindex=\"-1\">References <a class=\"header-anchor\" href=\"https://domzlab.com/blog/create-website/\">#</a></h3>\n<p>[1] “Permission denied to github-actions[bot]. The requested URL returned error: 403,” Stack Overflow. https://stackoverflow.com/questions/73687176/permission-denied-to-github-actionsbot-the-requested-url-returned-error-403 (accessed Sep. 05, 2023).</p>\n",
			"date_published": "2023-11-05T00:00:00Z"
		}
		
	]
}
